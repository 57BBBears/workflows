name: Deploy with docker compose
# All environment variables will be passed to docker compose file with a prefix INPUT_
on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to. Used as a prefix to required secrets e.g. <environment>_SSH_HOST'
        required: false
        default: ''
    secrets:
      SSH_HOST:
        description: 'SSH host address'
        required: true
      SSH_PORT:
        description: 'SSH port number'
        required: true
      SSH_USERNAME:
        description: 'SSH username'
        required: true
      SSH_SUDO_PASSWORD:
        description: 'Remote server user password'
        required: true
      SSH_PRIVATE_KEY:
        description: 'Content of SSH private key. e.g., raw content of ~/.ssh/id_rsa'
        required: true
      SSH_PROJECT_FOLDER:
        description: 'Project folder on a remote server to deploy in'
        required: true
      DOCKER_COMPOSE_FILE:
        description: 'Docker compose file'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      ALL_SECRETS: ${{ toJSON(secrets) }}

    steps:
      - name: Secrets to envs
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "to_entries[] | \"INPUT_\(.key)<<$EOF\n\(.value)\n$EOF\""; }
          echo "$ALL_SECRETS" | to_envs >> $GITHUB_ENV

      - name: Deploy on a remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_HOST) ] || secrets.SSH_HOST }}
          username: ${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_USERNAME) ] || secrets.SSH_USERNAME }}
          key: ${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_PRIVATE_KEY) ] || secrets.SSH_PRIVATE_KEY }}
          port: ${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_PORT) ] || secrets.SSH_PORT }}
          allenvs: true
          script: |
            echo '${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_PROJECT_FOLDER) ] || secrets.SSH_PROJECT_FOLDER }}'
            cd '${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_PROJECT_FOLDER) ] || secrets.SSH_PROJECT_FOLDER }}'
            git checkout ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
            git pull
            echo '${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_SUDO_PASSWORD) ] || secrets.SSH_SUDO_PASSWORD }}' | sudo -SE docker compose -f ${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.DOCKER_COMPOSE_FILE) ] || secrets.DOCKER_COMPOSE_FILE }} down
            sudo -E docker compose -f ${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.DOCKER_COMPOSE_FILE) ] || secrets.DOCKER_COMPOSE_FILE }} up -d --build
            echo '${{ inputs.environment != '' && secrets[ format('{0}_{1}', inputs.environment, secrets.SSH_SUDO_PASSWORD) ] || secrets.SSH_SUDO_PASSWORD }}' | sudo -S docker system prune --all --force